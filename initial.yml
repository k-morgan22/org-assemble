AWSTemplateFormatVersion: 2010-09-09
Description: create sqs queues, lambda functions, lambda roles, and policies to run code
  
Parameters:
  LoggingAccountEmail:
    Description: Email address used to create a centralized logging account
    Type: String
    MinLength: 6
    MaxLength: 64 
    AllowedPattern: ^[_A-Za-z0-9-\+\.]+(\.[_A-Za-z0-9-]+)*@[A-Za-z0-9-]+(\.[A-Za-z0-9]+)*(\.[A-Za-z]{2,})$
    ConstraintDescription: Account Email can contain only ASCII characters. This must be in the format of something@email.com


Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
    - Label: 
        default: Organization Security OU Configuration 
      Parameters:
      - LoggingAccountEmail
    
    ParameterLabels:
      LoggingAccountEmail:
        default: Log Archive Account Email Address

Resources:
  LambdaAdminRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument: 
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AdministratorAccess
      RoleName: testLambda
  
  ProducerFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Code: 
        S3Bucket: testing-org-lambda
        S3Key: producer.zip
      Handler: producer.lambda_handler
      Role: !GetAtt LambdaAdminRole.Arn
      Runtime: python3.7
      FunctionName: producer
      Timeout: 30

  CreateOuFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Code: 
        S3Bucket: testing-org-lambda
        S3Key: createOu.zip
      Handler: createOu.lambda_handler
      Role: !GetAtt LambdaAdminRole.Arn
      Runtime: python3.7
      FunctionName: createOu
      Timeout: 30

  CreateAccountFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Code: 
        S3Bucket: testing-org-lambda
        S3Key: createAccount.zip
      Handler: createAccount.lambda_handler
      Role: !GetAtt LambdaAdminRole.Arn
      Runtime: python3.7
      FunctionName: createAccount
      Timeout: 30

  MoveAccountFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Code: 
        S3Bucket: testing-org-lambda
        S3Key: moveAccount.zip
      Handler: moveAccount.lambda_handler
      Role: !GetAtt LambdaAdminRole.Arn
      Runtime: python3.7
      FunctionName: moveAccount
      Timeout: 30

  StacksetFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Code: 
        S3Bucket: testing-org-lambda
        S3Key: stackset.zip
      Handler: stackset.lambda_handler
      Role: !GetAtt LambdaAdminRole.Arn
      Runtime: python3.7
      FunctionName: stackset
      Timeout: 30

  UnitTestFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Code: 
        S3Bucket: testing-org-lambda
        S3Key: unitTest.zip
      Handler: unitTest.lambda_handler
      Role: !GetAtt LambdaAdminRole.Arn
      Runtime: python3.7
      FunctionName: unitTest
      Timeout: 30
  
  DeadLetterQueue:
    Type: "AWS::SQS::Queue"
    Properties:
      ContentBasedDeduplication: false
      FifoQueue: true
      MessageRetentionPeriod: 1209600
  
  FirstQueue:
    Type: "AWS::SQS::Queue"
    Properties:
      ContentBasedDeduplication: false
      FifoQueue: true
      ReceiveMessageWaitTimeSeconds: 20
      RedrivePolicy:
        deadletterTargetArn: !GetAtt DeadLetterQueue.Arn
        maxReceiveCount: 5
      VisibilityTimeout: 150

  SecondQueue:
    Type: "AWS::SQS::Queue"
    Properties:
      ContentBasedDeduplication: false
      FifoQueue: true
      ReceiveMessageWaitTimeSeconds: 20
      RedrivePolicy:
        deadletterTargetArn: !GetAtt DeadLetterQueue.Arn
        maxReceiveCount: 5
      VisibilityTimeout: 150

  ThirdQueue:
    Type: "AWS::SQS::Queue"
    Properties:
      ContentBasedDeduplication: false
      FifoQueue: true
      ReceiveMessageWaitTimeSeconds: 20
      RedrivePolicy:
        deadletterTargetArn: !GetAtt DeadLetterQueue.Arn
        maxReceiveCount: 5
      VisibilityTimeout: 150

  FourthQueue:
    Type: "AWS::SQS::Queue"
    Properties:
      ContentBasedDeduplication: false
      FifoQueue: true
      ReceiveMessageWaitTimeSeconds: 20
      RedrivePolicy:
        deadletterTargetArn: !GetAtt DeadLetterQueue.Arn
        maxReceiveCount: 5
      VisibilityTimeout: 150

  FifthQueue:
    Type: "AWS::SQS::Queue"
    Properties:
      ContentBasedDeduplication: false
      FifoQueue: true
      ReceiveMessageWaitTimeSeconds: 20
      RedrivePolicy:
        deadletterTargetArn: !GetAtt DeadLetterQueue.Arn
        maxReceiveCount: 5
      VisibilityTimeout: 150

  TriggerFirstFunction:
    Type: "AWS::Lambda::EventSourceMapping"
    Properties:
      EventSourceArn: !GetAtt FirstQueue.Arn
      FunctionName: !Ref CreateOuFunction

  TriggerSecondFunction:
    Type: "AWS::Lambda::EventSourceMapping"
    Properties:
      EventSourceArn: !GetAtt SecondQueue.Arn
      FunctionName: !Ref CreateAccountFunction

  TriggerThirdFunction:
    Type: "AWS::Lambda::EventSourceMapping"
    Properties:
      EventSourceArn: !GetAtt ThirdQueue.Arn
      FunctionName: !Ref MoveAccountFunction

  TriggerFourthFunction:
    Type: "AWS::Lambda::EventSourceMapping"
    Properties:
      BatchSize: 1
      EventSourceArn: !GetAtt FourthQueue.Arn
      FunctionName: !Ref StacksetFunction

  TriggerFifthFunction:
    Type: "AWS::Lambda::EventSourceMapping"
    Properties:
      EventSourceArn: !GetAtt FifthQueue.Arn
      FunctionName: !Ref UnitTestFunction


  TriggerProducer:
    Type: "Custom::TriggerProducer"
    Properties:
      ServiceToken: !GetAtt ProducerFunction.Arn
      LoggingEmail: !Ref LoggingAccountEmail
  
# Outputs:
  