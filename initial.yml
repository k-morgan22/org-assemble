AWSTemplateFormatVersion: 2010-09-09
Description: create sqs queues, lambda functions, lambda roles, and policies to run code
  
Parameters:
  LoggingAccountEmail:
    Description: Email address used to create a centralized logging account
    Type: String
    MinLength: 6
    MaxLength: 64 
    AllowedPattern: ^[_A-Za-z0-9-\+\.]+(\.[_A-Za-z0-9-]+)*@[A-Za-z0-9-]+(\.[A-Za-z0-9]+)*(\.[A-Za-z]{2,})$
    ConstraintDescription: Account Email can contain only ASCII characters. This must be in the format of something@email.com
  DevAccountEmail:
    Description: Email address used create a dev environment account 
    Type: String
    MinLength: 6
    MaxLength: 64
    AllowedPattern: ^[_A-Za-z0-9-\+\.]+(\.[_A-Za-z0-9-]+)*@[A-Za-z0-9-]+(\.[A-Za-z0-9]+)*(\.[A-Za-z]{2,})$
    ConstraintDescription: Account Email can contain only ASCII characters. This must be in the format of something@email.com
  StagingAccountEmail:
    Description: Email address used create a staging environment account 
    Type: String
    MinLength: 6
    MaxLength: 64
    AllowedPattern: ^[_A-Za-z0-9-\+\.]+(\.[_A-Za-z0-9-]+)*@[A-Za-z0-9-]+(\.[A-Za-z0-9]+)*(\.[A-Za-z]{2,})$
    ConstraintDescription: Account Email can contain only ASCII characters. This must be in the format of something@email.com
  ProdAccountEmail:
    Description: Email address used create a prod environment account
    Type: String
    MinLength: 6
    MaxLength: 64
    AllowedPattern: ^[_A-Za-z0-9-\+\.]+(\.[_A-Za-z0-9-]+)*@[A-Za-z0-9-]+(\.[A-Za-z0-9]+)*(\.[A-Za-z]{2,})$
    ConstraintDescription: Account Email can contain only ASCII characters. This must be in the format of something@email.com
  SlackWebHookUrl:
    Description: Incoming WebHooks Integration for slack channel messaging 
    Type: String
    NoEcho: true




Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
    - Label: 
        default: Organization Security OU Configuration 
      Parameters:
      - LoggingAccountEmail
    - Label:
        default: Organization Workloads OU Configuration 
      Parameters:
      - DevAccountEmail
      - StagingAccountEmail
      - ProdAccountEmail
    - Label:
        default: Slack Channel Messaging Configuration 
      Parameters:
      - SlackWebHookUrl
    
    ParameterLabels:
      LoggingAccountEmail:
        default: Log Archive Account Email Address
      DevAccountEmail:
        default: Dev Account Email Address
      StagingAccountEmail:
        default: Staging Account Email Address
      ProdAccountEmail:
        default: Prod Account Email Address
      SlackWebHookUrl:
        default: Slack WebHook Url

Resources:
  LambdaAdminRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument: 
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AdministratorAccess
      RoleName: testLambda
  
  ProducerFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Code: 
        S3Bucket: testing-org-lambda
        S3Key: producer.zip
      Handler: producer.lambda_handler
      Role: !GetAtt LambdaAdminRole.Arn
      Runtime: python3.7
      FunctionName: producer
      Timeout: 30
      Environment:
        Variables:
          SlackWebHook: !Ref SlackWebHookUrl
          NextQueue: !Ref FirstQueue
          SlackArn: !Ref SlackTopic

  LogicFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Code: 
        S3Bucket: testing-org-lambda
        S3Key: logic.zip
      Handler: logic.lambda_handler
      Role: !GetAtt LambdaAdminRole.Arn
      Runtime: python3.7
      FunctionName: logic
      Timeout: 30
      Environment:
        Variables:
          LambdaName: Logic
          NextQueue: !Ref SecondQueue
          SecondQueue: !Ref FourthQueue
          SlackArn: !Ref SlackTopic

  CreateOuFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Code: 
        S3Bucket: testing-org-lambda
        S3Key: createOu.zip
      Handler: createOu.lambda_handler
      Role: !GetAtt LambdaAdminRole.Arn
      Runtime: python3.7
      FunctionName: createOu
      Timeout: 30
      Environment:
        Variables:
          LambdaName: CreateOu
          InvokeLambda: !Ref LogicFunction
          SlackArn: !Ref SlackTopic


  CreateAccountFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Code: 
        S3Bucket: testing-org-lambda
        S3Key: createAccount.zip
      Handler: createAccount.lambda_handler
      Role: !GetAtt LambdaAdminRole.Arn
      Runtime: python3.7
      FunctionName: createAccount
      Timeout: 30
      Environment:
        Variables:
          LambdaName: CreateAccount
          NextQueue: !Ref ThirdQueue
          SlackArn: !Ref SlackTopic      

  MoveAccountFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Code: 
        S3Bucket: testing-org-lambda
        S3Key: moveAccount.zip
      Handler: moveAccount.lambda_handler
      Role: !GetAtt LambdaAdminRole.Arn
      Runtime: python3.7
      FunctionName: moveAccount
      Timeout: 30
      Environment:
        Variables:
          LambdaName: MoveAccount
          InvokeLambda: !Ref LogicFunction
          SlackArn: !Ref SlackTopic

  StacksetFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Code: 
        S3Bucket: testing-org-lambda
        S3Key: stackset.zip
      Handler: stackset.lambda_handler
      Role: !GetAtt LambdaAdminRole.Arn
      Runtime: python3.7
      FunctionName: stackset
      Timeout: 30
      Environment:
        Variables:
          LambdaName: Stackset
          NextQueue: !Ref FifthQueue
          SlackArn: !Ref SlackTopic 

  CreateTrailFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Code: 
        S3Bucket: testing-org-lambda
        S3Key: createTrail.zip
      Handler: createTrail.lambda_handler
      Role: !GetAtt LambdaAdminRole.Arn
      Runtime: python3.7
      FunctionName: createTrail
      Timeout: 30
      Environment:
        Variables:
          LambdaName: CreateTrail
          SlackArn: !Ref SlackTopic 
  
  DeadLetterQueue:
    Type: "AWS::SQS::Queue"
    Properties:
      FifoQueue: true
      MessageRetentionPeriod: 1209600
  
  FirstQueue:
    Type: "AWS::SQS::Queue"
    Properties:
      ContentBasedDeduplication: false
      FifoQueue: true
      ReceiveMessageWaitTimeSeconds: 20
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt DeadLetterQueue.Arn
        maxReceiveCount: 1
      VisibilityTimeout: 150

  SecondQueue:
    Type: "AWS::SQS::Queue"
    Properties:
      ContentBasedDeduplication: false
      FifoQueue: true
      ReceiveMessageWaitTimeSeconds: 20
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt DeadLetterQueue.Arn
        maxReceiveCount: 1
      VisibilityTimeout: 150

  ThirdQueue:
    Type: "AWS::SQS::Queue"
    Properties:
      ContentBasedDeduplication: false
      FifoQueue: true
      ReceiveMessageWaitTimeSeconds: 20
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt DeadLetterQueue.Arn
        maxReceiveCount: 1
      VisibilityTimeout: 150

  FourthQueue:
    Type: "AWS::SQS::Queue"
    Properties:
      ContentBasedDeduplication: false
      FifoQueue: true
      ReceiveMessageWaitTimeSeconds: 20
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt DeadLetterQueue.Arn
        maxReceiveCount: 1
      VisibilityTimeout: 150

  FifthQueue:
    Type: "AWS::SQS::Queue"
    Properties:
      ContentBasedDeduplication: false
      FifoQueue: true
      ReceiveMessageWaitTimeSeconds: 20
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt DeadLetterQueue.Arn
        maxReceiveCount: 1
      VisibilityTimeout: 150

  TriggerFirstFunction:
    Type: "AWS::Lambda::EventSourceMapping"
    Properties:
      EventSourceArn: !GetAtt FirstQueue.Arn
      FunctionName: !Ref CreateOuFunction

  TriggerSecondFunction:
    Type: "AWS::Lambda::EventSourceMapping"
    Properties:
      EventSourceArn: !GetAtt SecondQueue.Arn
      FunctionName: !Ref CreateAccountFunction

  TriggerThirdFunction:
    Type: "AWS::Lambda::EventSourceMapping"
    Properties:
      EventSourceArn: !GetAtt ThirdQueue.Arn
      FunctionName: !Ref MoveAccountFunction

  TriggerFourthFunction:
    Type: "AWS::Lambda::EventSourceMapping"
    Properties:
      BatchSize: 1
      EventSourceArn: !GetAtt FourthQueue.Arn
      FunctionName: !Ref StacksetFunction

  TriggerFifthFunction:
    Type: "AWS::Lambda::EventSourceMapping"
    Properties:
      EventSourceArn: !GetAtt FifthQueue.Arn
      FunctionName: !Ref CreateTrailFunction

  LoggingEmail:
    Type: "AWS::SSM::Parameter"
    Properties:
      Type: String 
      Description: Email address used to create logging account
      Value: !Ref LoggingAccountEmail
      Name: /org-assemble/emails/logging-bdac6e7f-5804-43c1-b6c2-506d81aee5a7
  
  DevEmail:
    Type: "AWS::SSM::Parameter"
    Properties:
      Type: String 
      Description: Email address used to create dev account
      Value: !Ref DevAccountEmail
      Name: /org-assemble/emails/dev-86cbc64f-3451-4239-bd07-2430813e7391

  StagingEmail:
    Type: "AWS::SSM::Parameter"
    Properties:
      Type: String 
      Description: Email address used to create staging account
      Value: !Ref StagingAccountEmail
      Name: /org-assemble/emails/staging-256b2e46-5c62-4819-a4d9-d9b55fa5aefc
  
  ProdEmail:
    Type: "AWS::SSM::Parameter"
    Properties:
      Type: String 
      Description: Email address used to create prod account
      Value: !Ref ProdAccountEmail
      Name: /org-assemble/emails/prod-367f087d-5008-4cbc-a5b7-2c83244445b1


  SlackFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Code: 
        S3Bucket: testing-org-lambda
        S3Key: slack.zip
      Handler: slack.lambda_handler
      Role: !GetAtt LambdaAdminRole.Arn
      Runtime: python3.7
      FunctionName: slack
      Timeout: 30
  
  SlackTopic:
    Type: "AWS::SNS::Topic"
    Properties:
      Subscription:
        - Endpoint: !GetAtt SlackFunction.Arn
          Protocol: lambda

  SlackTopicPermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt SlackFunction.Arn
      Principal: sns.amazonaws.com
      SourceArn: !Ref SlackTopic

  TriggerProducer:
    DependsOn:
      - SlackTopicPermission
    Type: "Custom::TriggerProducer"
    Properties:
      ServiceToken: !GetAtt ProducerFunction.Arn
      LoggingEmail: !Ref LoggingAccountEmail
      SlackWebHook: !Ref SlackWebHookUrl
  
# Outputs:
  