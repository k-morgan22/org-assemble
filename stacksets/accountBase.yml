AWSTemplateFormatVersion: "2010-09-09"

Description: Baseline for new accounts - encrypted bucket, limited role, server access logs bucket
  
Resources:
  stacksetBucketsFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Code: 
        S3Bucket: testing-org-lambda
        S3Key: stacksetBuckets.zip
      Description: empty buckets on cloudformation delete
      FunctionName: stacksetBuckets
      Handler: stacksetBuckets.handler
      Layers:
        - arn:aws:lambda:us-east-1:113088814899:layer:Klayers-python37-crhelper:4
      Runtime: python3.7
      Timeout: 30
      MemorySize: 512
      Role: !GetAtt stacksetBucketsRole.Arn
  
  stacksetBucketsRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement:
          - Sid: AllowAssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Description: Allow lambda to empty buckets 
      RoleName: stacksetBucketsRole

  stacksetBucketsRolePolicy:
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyDocument: 
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Resource: '*'
            Action:
              - s3:* 
      PolicyName: stacksetBucketsRolePolicy
      Roles:
        - !Ref stacksetBucketsRole
    
  triggerStacksetBuckets:
    DependsOn: 
      - stacksetBucketsRolePolicy
      - stacksetBucketsRole
    Type: "Custom::triggerStacksetBuckets"
    Properties:
      ServiceToken: !GetAtt stacksetBucketsFunction.Arn
      accountId: !Ref "AWS::AccountId"
      storageBucket: !Ref encryptedBucket
      logBucket: !Ref s3AccessBucket
  
  s3AccessBucket:
    Type: "AWS::S3::Bucket"
    Properties:
      AccessControl: LogDeliveryWrite
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      BucketName: !Sub s3-access-logs-${AWS::AccountId} 
      PublicAccessBlockConfiguration:
        BlockPublicAcls: True
        BlockPublicPolicy: True
        IgnorePublicAcls: True
        RestrictPublicBuckets: True

  encryptedBucket:
    Type: "AWS::S3::Bucket"
    Properties:
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      BucketName: !Sub bucket-${AWS::AccountId} 
      LoggingConfiguration:
        DestinationBucketName: !Ref s3AccessBucket
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
  
  limitedS3Role:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement:
          - Sid: AllowAssumeRole
            Effect: Allow
            Principal:
              AWS: !Sub ${AWS::AccountId}
            Action: sts:AssumeRole
      Description: Minimum privilege role, allowing read & write to s3 bucket
      MaxSessionDuration: 3600
      RoleName: LimitedS3User

  limitedS3RolePolicy:
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyDocument: 
        Version: "2012-10-17"
        Statement:
          - Sid: ListObjectsInBucket
            Effect: Allow
            Action: s3:ListBucket
            Resource: !GetAtt encryptedBucket.Arn
          - Sid: ListBucketsInAccountInConsole
            Effect: Allow
            Action: s3:ListAllMyBuckets
            Resource: arn:aws:s3:::* 
          - Sid: AllowReadWrite
            Effect: Allow
            Action: 
            - s3:PutObject
            - s3:Getobject
            Resource: !Sub arn:aws:s3:::${encryptedBucket}/*
      PolicyName: s3UserAccess
      Roles:
        - !Ref limitedS3Role
